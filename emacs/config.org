#+TITLE: add's GNU Emacs Config
#+AUTHOR: Andreas (add) Wilfer
#+DESCRIPTION: Andreas personal emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager
#+BEGIN_SRC emacs-lisp
  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Uncomment for systems which cannot create symlinks:
  ;;(elpaca-no-symlink-mode)
#+END_SRC

** TODO - Figure this stuff out
#+BEGIN_SRC emacs-lisp
  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :ensure t :demand t)
  ;;(elpaca-wait)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  ;;(use-package evil :ensure t :demand t)

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  (elpaca nil (message "deferred"))

#+END_SRC
** General.el Keybindings

* Misc stuff to configure
#+BEGIN_SRC emacs-lisp
  (load-theme 'wombat t)
  (setq calendar-week-start-day 1)
  (setq backup-inhibited t)
  (setq inhibit-startup-screen t
	initial-scratch-message ";; Ready? Let's goooo!\n\n")
  (setq frame-inhibit-implied-resize t)
  (defun util-font-resize (arg)
    "Resizes the font to either a given value or default value of 100"
    (interactive (list (read-number "Resize fonts to height: " 100)))
    (set-face-attribute 'default nil :height arg))

  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  ;;(menu-bar-mode 1)

  (setq display-line-numbers-type 'relative)

  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq confirm-nonexistent-file-or-buffer nil)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
